"use strict";
/*! JsonWebApi v1.0.0 is distributed under the FreeBSD License | Copyright (c) 2016, Carlos Rafael Gimenes das Neves | https://github.com/carlosrafaelgn/JsonWebApi */
!function () { var e = function (e, t) { return t.message ? { xhr: e, success: !1, status: -1, value: JsonWebApi.messages.exceptionDescription + t.message, exceptionType: t.name || "Error" } : { xhr: e, success: !1, status: -1, value: JsonWebApi.messages.exceptionDescription + t, exceptionType: t.name || "Error" } }, t = function (t) { try { if (200 === t.status) return { xhr: t, success: !0, status: 200, value: JSON.parse(t.responseText) }; if (t.status > 200 && t.status < 300) return { xhr: t, success: !0, status: t.status, value: "" }; var s = JSON.parse(t.responseText); return s && s.ExceptionMessage ? { xhr: t, success: !1, status: t.status, value: s.ExceptionMessage, exceptionType: s.ExceptionType || "System.Exception" } : s && s.Message ? { xhr: t, success: !1, status: t.status, value: s.Message, exceptionType: s.ExceptionType || "System.Exception" } : { xhr: t, success: !1, status: t.status, value: JsonWebApi.messages.networkError + t.status, exceptionType: "System.Exception" } } catch (n) { return "SyntaxError" === n.name ? { xhr: t, success: !1, status: -1, value: t.responseText, exceptionType: "SyntaxError" } : e(t, n) } }, s = function (e, t, s) { var n, o, i, a, r = e + "?"; for (i = s; i < t.length; i += 2) { if (n = t[i], o = t[i + 1], !n && 0 !== n) throw JsonWebApi.messages.invalidParameterName; if (n = encodeURIComponent(n) + "=", void 0 !== o && null !== o) if (o.constructor !== Array) { switch (typeof o) { case "function": throw JsonWebApi.messages.parameterValueCannotBeFunction; case "object": throw JsonWebApi.messages.parameterValueCannotBeObject } i !== s && (r += "&"), r += n + encodeURIComponent(o) } else if (o.length) { for (i !== s && (r += "&"), r += n + encodeURIComponent(void 0 === o[0] || null === o[0] ? "" : o[0]), a = 1; a < o.length; a++) r += "&" + n + encodeURIComponent(void 0 === o[a] || null === o[a] ? "" : o[a]); continue } } return r }, n = function (s, n, o, i, a) { var r, u = !1; JsonWebApi.active++; try { return r = new XMLHttpRequest, r.open(n, o, s), JsonWebApi.avoidCache && (r.setRequestHeader("Cache-Control", "no-cache, no-store"), r.setRequestHeader("Pragma", "no-cache")), r.setRequestHeader("Accept", "application/json"), s && (r.onreadystatechange = function () { 4 !== r.readyState || u || (u = !0, JsonWebApi.active--, i(t(r))) }), void 0 != a ? (r.setRequestHeader("Content-type", "application/json; charset=utf-8"), r.send(JSON.stringify(a))) : r.send(), s ? !0 : t(r) } catch (c) { return s ? (u = !0, JsonWebApi.active--, i(e(r, c)), !1) : e(r, c) } finally { s || JsonWebApi.active-- } }; window.JsonWebApi = { messages: { invalidURL: "URL inválido", invalidCallback: "Callback inválido", invalidBodyObject: "Objeto do corpo da requisição inválido", invalidArguments: "Argumentos inválidos", invalidArgumentCount: "Quantidade de argumentos inválidos", invalidParameterName: "Nome do parâmetro inválido", parameterValueCannotBeObject: "O valor de um parâmetro não podem ser um objeto", parameterValueCannotBeFunction: "O valor de um parâmetro não podem ser uma função", exceptionDescription: "Ocorreu o seguinte erro: ", networkError: "Ocorreu um erro de rede: " }, active: 0, avoidCache: !0, redirect: function (e) { if (!e) throw JsonWebApi.messages.invalidURL; if (!(1 & arguments.length)) throw JsonWebApi.messages.invalidArgumentCount; return window.location.href = arguments.length > 1 ? s(e, arguments, 1) : e, !0 }, getSync: function (e) { if (!e) throw JsonWebApi.messages.invalidURL; if (!(1 & arguments.length)) throw JsonWebApi.messages.invalidArgumentCount; return n(!1, "get", arguments.length > 1 ? s(e, arguments, 1) : e, null) }, get: function (e, t) { if (!e) throw JsonWebApi.messages.invalidURL; if (!t) throw JsonWebApi.messages.invalidCallback; if (1 & arguments.length) throw JsonWebApi.messages.invalidArgumentCount; return n(!0, "get", arguments.length > 2 ? s(e, arguments, 2) : e, t) }, postSync: function (e, t) { if (!e) throw JsonWebApi.messages.invalidURL; if (void 0 === t) throw JsonWebApi.messages.invalidBodyObject; if (1 & arguments.length) throw JsonWebApi.messages.invalidArgumentCount; return n(!1, "post", arguments.length > 2 ? s(e, arguments, 2) : e, null, t) }, post: function (e, t, o) { if (!e) throw JsonWebApi.messages.invalidURL; if (void 0 === t) throw JsonWebApi.messages.invalidBodyObject; if (!o) throw JsonWebApi.messages.invalidCallback; if (!(1 & arguments.length)) throw JsonWebApi.messages.invalidArgumentCount; return n(!0, "post", arguments.length > 3 ? s(e, arguments, 3) : e, o, t) } } }();